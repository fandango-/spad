)abbrev category ZZMON ZZMonoid
ZZMonoid(S : SetCategory): Category ==
    Join(MyMonoid, CoercibleTo(S -> S), CoercibleFrom(S -> S)) with
      elt: (%, S) -> S

)abbrev category ZZFMON ZZFunMonoid
ZZFunMonoid(S : Finite): Category == Join(ZZMonoid S, Monoid)

)abbrev domain ZZFUN ZZFun
ZZFun(S : SetCategory): ZZMonoid S with
    if S has Finite then ZZFunMonoid(S)
  == MyFun S add
    Rep ==> MyFun S
    rep x ==> (x@%) pretend Rep
    per x ==> (x@Rep) pretend %
    if S has Finite then
        elements: List S := enumerate()$S
        ((x : %) = (y : %)): Boolean ==
            for s in elements repeat
                if x s ~= y s then return false
            true
        coerce(x : %): OutputForm ==
            of z ==> z :: OutputForm
            pairs: List OutputForm := [paren [of s, of x s] for s in elements]
            bracket pairs

