)abbrev package CTASK3 CodingTask3
++ \spadtype{CodingTask3} is a dummy package.
CodingTask3(F, UP) : Exports == Implementation where
    F : Join(AlgebraicallyClosedField, CharacteristicZero,
             RetractableTo Integer, RetractableTo Fraction Integer)
    UP : UnivariatePolynomialCategory F

    RF ==> Fraction UP
    L  ==> LinearOrdinaryDifferentialOperator1 RF
    L2 ==> LinearOrdinaryDifferentialOperator2(UP, RF)

    Exports == with
        find_right_factor : (L, L, Polynomial(F) -> Factored(Polynomial(F))) -> L
        ++ find_right_factor(f, r, factorizer) finds a right factor of f given
        ++ a nontrivial solution to the mixed equation \spad{f r + l f = 0}
        ++ given a function factorizer(x) that returns the factorization of x
        ++ into irreducibles.

    Implementation == add
        import from InnerCommonDenominator(UP, RF, List UP, List RF)
        import from PrimitiveRatDE(F, UP, L2, L)

        regular_point : L -> Integer
        unitlist : (NonNegativeInteger, NonNegativeInteger) -> List F

        regular_point(f) ==
            a := numer(leadingCoefficient(f) *
                       commonDenominator(coefficients(f)))
            coefficient(a, 0) ~= 0 => 0
            for i in 1.. repeat
                a(j := i::F) ~= 0 => return i
                a(-j) ~= 0 => return(-i)

        unitlist(i, q) ==
            v := new(q, 0)$Vector(F)
            v.i := factorial(i-1) :: F
            parts v

        find_right_factor(f, r, factorizer) ==
            p := regular_point(f)
            op := splitDenominator(f, [0]).eq
            uts := UnivariateTaylorSeries(F, new()$Symbol, p :: F)
            tools := UTSodetools(F, UP, L2, uts)
            solver := UnivariateTaylorSeriesODESolver(F, uts)
            func := LODO2FUN(op)$tools
            q := degree op
            bas := [ode(func, unitlist(i, q))$solver
                    for i in 1..q]
            apr : LinearOrdinaryDifferentialOperator1(uts) := 0
            rtmp := r
            while rtmp ~= 0 repeat
                apr := (apr +
                        monomial(RF2UTS(leadingCoefficient(rtmp))$tools, degree(rtmp)))
                rtmp := reductum rtmp
            list := [apr(b) for b in bas]
            coeffs := [[(coefficient(l, i) :: Polynomial(F)) :: Fraction(Polynomial(F))
                        for i in 0..q-1] for l in list]
            mat : Matrix(Fraction(Polynomial(F))) := matrix(coeffs)
            cpol := characteristicPolynomial(mat)$EigenPackage(F)
            eigenvalue := ((zeroOf(nthFactor(factorizer(cpol), 1)) :: UP) :: RF) :: L
            rhf := rightGcd(f, r - eigenvalue)
            rhf

